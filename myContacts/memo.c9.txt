9-1>
애플리케이션 : 특정 기능을 제공하는 프로그램으로 그 자체로 완전한 소프트웨어 
              일반적으로 사용자 인터페이스도 있고 자료를 처리하거나 사용자와 상호작용하는 기능을 모두 포함 
              -> 웹 사이트 자체로 완전한 기능을 제공 

API : 애플리케이션 간에 자료를 주고받으면서 특정 기능을 실행
      다른 시스템끼리 자료를 주고받을 수도 있고 새로운 애플리케이션을 만들 수도 있음
      만약 웹 사이트에서 사용한 AIP를 공개할 경우 이 AIP를 다른 애플리케이션에서도 얼마든지 활용 가능 
      둘 이상의 컴퓨터 혹은 애플리케이션 간에 자료를 어떻게 주고받는지를 지정하는 역할 즉 SNS사이트에서 사용자와 데이터베이스 사이에 자료를 주고받는 방식 

REST : HTTP프로토콜을 활용하여 자료를 주고받을 때 필요한 약속된 구조
    REST를 잘 지켜 개발한 AIP를 REST API, RESTful API라고 함 

RESTful API에서 주고받을 자원의 위치는 URL를 사용해 표현 (자원은 데이터베이스 자료뿐만 아니라 웹 서버에 올라와 있는 이미지나 멀티미디어 등을 모두 포함)

URL이름 규명 원칙 
    1. 자원 이름은 명사형으로 알파벳 소문자를 사용 
    2. 자원 이름으로 단어를 2개 이상 사용한다면 붙임표(-)로 연결 (또는 카멜표기법을 사용하며 밑줄은 사용하지 않는다)
    3. 자원간에 계층이 있다면 슬래시(/)로 구분하되 URL끝에는 슬래시를 붙이지 않느다
    4. 자원을 ㅊ머리하는 방법을 URL에 포함시키지 않는다 

자원을 어떻게 처리할 것인지는 HTTP 요청 방식으로 표현 
    POST : 자원을 새로 만듬 (Create)
    GET : 자원을 가져옴 (Read)
    PUT : 자원을 수정 (Update)
    DELETE : 자원을 삭제 (Delete)
*이러한 작업을 CURD 라고 하며 AIP를 만드는 것은 자료의 CURD를 작성한다는 것과 같은 말 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9-2>
디자인 아키텍처 : 코드를 읽기 쉽고 관리하기 편하도록 기능이나 역할에 따라 여러 파일로 나눈 뒤 연결해서 사용하자는 것 

MVC : model, view, controller라느 뜻으로 애플리케이션을 세 영역으로 나누어 구성하는 방식 
      모델과 뷰, 컨트롤러로 나눠서 코딩하면 실제 처리 로직과 데이터베이스, 인터페이스 부분이 서로 영향을 받지 않음 

    모델 : 애플리케이션에서 처리할 대상, 데이터베이스를 통해 자료를 저장하거나 검색, 수정하는 함수들이 모델에 해당, 사용자에게 어떻게 보일지는 신경쓰지 않고 처리할 대상에 집중
    뷰 : 컨트롤러나 모델의 처리 결과를 시각적으로 보여줌, 사이트나 애플리케이션에 표시되는 화면을 만듬, 서버에서 가져온 동적 자료를 표시하므로 템플릿 형태로 처리 
    컨트롤러 : 모델과 뷰 중간에 위치하면서 요청에 따라 모델이나 뷰를 수정하는 역할 수행, 노드에서 작성하는 라우트코드가 컨트롤러에 해당, 코드를 가장 많이 작성하는 부분 

주의점 - 뷰와 모델은 직접 연결되지 않음
컨트롤러가 중간에 있어 뷰와 모델을 완전히 분리시킴, 뷰는 사용자에게 보여 주는 인터페이스만 처리하고 모델은 데이터베이스와 연결해서 자료를 처리하는 일만 할 수 있음 

라우트 코드는 건드리지 않고 함수 부분만 수정하기 위해 뷰와 컨트롤러 사이 중간에 라우터를 거침 
라우트 코드가 복잡해지면 어떤 함수를 처리해야 할지 중간에서 정리하는 기능을 수행하는 것이 라우터 객체 
컨트롤러 코드에서 라우터 객체를 분리해서 컨트롤러에는 함수들만 남게됨 



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------