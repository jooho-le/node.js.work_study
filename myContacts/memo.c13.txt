13-1>
HTTP프로토콜의 가장 큰 특징은 상태가 없다는 것 

요청을 보내고 응답이 끝나면 HTTP프로토콜이 클라이언트와 서버 사이의 연결을 끊어 버리기 때문
요청할 때마다 계속 새로 연결하고 응답을 받는 식 
HTTP 연결상태가 계속 유지되지 않으므로 이런 것을 상태가 없다 즉 stateless라고 이야기함 

쿠키 : 웹 브라우저를 이용할 때 사용자 컴퓨터에 저장되는 정보, 사용자가 웹 사이트에 접속했을 때 컴퓨터에 다운로드되어 브라우저에 저장되는 작은 텍스트 파일 
쿠키에는 사용자의 설정이나 이용 내역등이 저장되는데 한번 방문 했던 사이트에 다시 접속하면 쿠키를 통해 사용자의 장치를 인식함  

쿠키 정보는 서버에서 만들어서 클라이언트로 보내기도 하고 필요할 경우 클라이언트에서 직접 만들어서 쿠키로 저장할수 있음 
서버에서 만든 쿠키는 접속하는 클라이언트를 식별하는 정보나 사이트 화면을 표시할 때 필요한 옵션들 

로그인 예시
1. 사용자가 아이디와 비밀번호를 입력하고 로그인 버튼을 클릭하여 서버에 요청을 보냄 
2. 서버에서 사용자 검증이 완료되면 사용자를 식별할 수 있는 쿠키를 만들고 HTTP응답 헤더에 담아 클라이언트로 보냄 
   웹 브라우저는 서버로부터 받은 쿠키를 사용자의 컴퓨터에 저장 
3. 사용자가 서비스 내에서 다른 페이지로 이동하거나 추가 정보를 요청할 때 웹 브라우저는 저장된 쿠키를 HTTP요청 헤더에 담아 서버로 전송 
4. 서버에서는 쿠키를 보고 사용자를 식별하고 인증함 사용자를 확인하면 요청을 처리하고 응답 

세션 : 서버에 저장되는 정보, 클라이언트가 서버에 요청할 때는 요청 객체 쿠키를 담아서 보내는데 이때 쿠키 정보에는 세션 ID도 포함되어 있음 
클라이언트(웹 브라우저)에서 서버로 요청을 보내면 함께 보면 쿠키안에 세션 ID가 있는지 확인하는데 없다면 접속한 클라이언트의 세션 정보를 만들어 서버에 저장함 
사용자 컴퓨터에 저장하는 쿠키보다 서버에 저장하는 세션 정보가 더 안전하므로 로그인 같이 보안 등 중요한 작업을 할 때 세션을 많이 사용 

쿠키와 세션을 사용한 인증방법 
1. 클라이언트가 서버로 첫 번째 요청 보냄 (ex 로그인)
2. 서버는 데이터베이스에 사용자가 있는지 확인
3. 사용자가 확인되면 서버에서 세션을 발급하고 저장, 그리고 클라이언트에게 응답할 때 세션 id를 함께 보냄 
4. 클라이언트에서는 발급받은 세션 id를 쿠키 형태로 저장 
5. 클라이언트에서 로그인이 필요할 때 서버에 세션 id도 함께 보내서 요청
6. 서버에서는 세션을 확인
7. 세션을 가지고 있따면 즉 인증된 사용자라면 서버에서 요청을 처리, 필요할 경우 서버에서는 세션정보를 수정해서 저장
8. 사용자가 확인되면 요청 처리 결과를 클라이언트에게 넘겨줌 

서버에 저장된 세션에는 상태가 함께 저장됨 
한번 세션이 만들어지면 클라이언트의 쿠키에 세션 id를 저장하므로 클라이언트 요청이 있을 때마다 세션id와 서버의 세션 정보만 확인하면 됨 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

13-3>
세션은 서버에 저장되어 있으면서 클라이언트에 있는 세션 id와 비교해서 사용자를 처리 

토큰에는 사용자 정보를 비롯해 위조를 막는 서명에 이르기까지 인증할 때 필요한 모든 정보가 포함되어 있음 
특정 서버에 저장하는 것이 아니므로 서버 간에 공유할 수도 있음 

토큰을 사용하는 인증 방식은 상태가 없으므로 서버에서 사용자 상태를 저장하지 않고 토큰 안에 사용자를 증명하는 내용이 포함됨 

쿠키와 세션에서는 서버에 세션을 저장해 놓고 상태가 없는 HTTP프로토콜을 마치 상태가 있는 것처럼 사용 
하지만 이 방법은 세션이 저장공간을 차지한다는 단점이 존재

반면 토큰 방식은 저장공간을 따로 필요하지 않음, 서버에 저장하지 않는다는 뜻 
토큰 자체에 여러 정보를 담아서 클라이언트와 서버가 주고받기 떄문 

토큰 방식은 상태가 저장되지 않으므로 요청할 때마다 JWT를 담아서 서버로 보내고 서버는 JWT에 담겨 있는 사용자 정보를 확인한 후 요청을 처리 

1. 사용자가 첫 번째 로그인 요청
2. 서버는 데이터베이스에 사용자가 있는지 확인
3. 사용자가 확인되면 서버에는 토큰을 발급하고 이것을 응답 객체에 담아 클라이언트에게 보냄 
4. 클라이언트의 쿠키에 토큰을 저장 
5. 클라이언트에서 로그인이 필요할 때 요청 헤더에 토큰을 담아 서버에 요청 
6. 서버에서는 JWT를 검증해서 사용자 정보를 확인 
7. 사용자가 확인되면 요청한 처리 결과를 클라이언트에게 념겨줌 

웹 토큰은 하나의 문자열이면서 마침표를 기준으로 3개 영역으로 나뉘어 있음 
첫 번째 영역은 헤더, 두번째는 페이로드, 세번째는 서명 

- 헤더 : 토큰의 알고리즘과 유형이 담겨 있음, 헤더에 있는 각각의 필드를 헤더 파라미터라고 함 
- 페이로드 : 사용자 인증 정보가 담겨 있음, 페이로드에 있는 각각의 필드를 클레임이라고 함 
- 서명 : 헤더와 페이로드 뒤에 붙이는 비밀키로 외부에 공개하면 안되어 .env 파일처럼 서버의 안전한 곳에 저장해 두고 사용 

JWT웹 사이트에서 볼 수 있듯 토큰을 해석(인코딩) 하면 JSON문자열로 쉽게 바꿀수 있음 
그러다 보니 JWT토큰에 중요한 정보를 담아서는 안됨 

JWT로 사용자 인증하는 방법
1. 서버에서 토큰 만들기 -> jwt.sign 함수 
   사용자가 로그인을 요청하면 서버에서는 jwt.sign함수를 사용해 토큰을 만듬 
   페이로드는 JSON형식으로 토큰에 담아 둘 내용임, 필요하다면 콜백함수를 지정해서 비동기로 처리 가능 
2. 클라이언트에서 토큰 전송하기 
   서버에서 클라이언트에 응답할 때 토큰을 보냄 이 정보는 쿠키 등에 보관해 두었다가 클라이언트에서 서버로 요청할 때 요청 헤더에 함께 넣음 
3. 서버에서 토큰 검증하기 
   서버에서 요청 헤더이 있는 토큰을 받으면 마침표를 기준으로 앞의 두 부분을 해석 
   헤더와 페이로드가 JSON형식으로 해석됨 
   jwt.decode함수를 사용하면 토큰을 해석해서 페이로드를 반환 
   jwt.verify함수는 서명을 검증한 후 페이로드를 반환 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------